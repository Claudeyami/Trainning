"""
Script chu·∫©n b·ªã training v·ªõi environment FIXED
Ki·ªÉm tra v√† t·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
"""

import os
import shutil
from datetime import datetime


def prepare_training_environment():
    """Chu·∫©n b·ªã m√¥i tr∆∞·ªùng training"""
    print("üöÄ CHU·∫®N B·ªä TRAINING V·ªöI ENVIRONMENT FIXED")
    print("=" * 50)
    
    # T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
    directories = [
        "model/checkpoints",
        "model/final", 
        "logs",
        "model_backup"
    ]
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"‚úÖ T·∫°o th∆∞ m·ª•c: {directory}")
        else:
            print(f"üìÅ Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i: {directory}")
    
    # Ki·ªÉm tra c√°c file c·∫ßn thi·∫øt
    required_files = [
        "g1_standing_env_fixed.py",
        "configs/g1_train_stand_fixed.yaml",
        "train_fixed.py",
        "demo_fixed.py",
        "test_comparison.py"
    ]
    
    print(f"\nüìã KI·ªÇM TRA C√ÅC FILE C·∫¶N THI·∫æT:")
    all_files_exist = True
    
    for file in required_files:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} - THI·∫æU!")
            all_files_exist = False
    
    # Ki·ªÉm tra config file
    config_path = "configs/g1_train_stand_fixed.yaml"
    if os.path.exists(config_path):
        print(f"\n‚öôÔ∏è  CONFIG FILE:")
        with open(config_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if "PD Control gains" in content:
                print(f"  ‚úÖ PD Controller configured")
            if "Assist system" in content:
                print(f"  ‚úÖ Assist system configured")
            if "Governor system" in content:
                print(f"  ‚úÖ Governor system configured")
    
    # Ki·ªÉm tra model hi·ªán c√≥
    print(f"\nüìÅ MODEL HI·ªÜN C√ì:")
    model_files = []
    for root, dirs, files in os.walk("model"):
        for file in files:
            if file.endswith(('.zip', '.pkl')):
                file_path = os.path.join(root, file)
                size = os.path.getsize(file_path) / (1024*1024)
                model_files.append((file, size))
                print(f"  üìÑ {file} ({size:.1f} MB)")
    
    if not model_files:
        print(f"  üì≠ Kh√¥ng c√≥ model n√†o")
    
    # Ki·ªÉm tra logs
    print(f"\nüìä LOGS:")
    if os.path.exists("logs"):
        log_items = os.listdir("logs")
        if log_items:
            for item in log_items:
                item_path = os.path.join("logs", item)
                if os.path.isdir(item_path):
                    print(f"  üìÅ {item}/")
                else:
                    size = os.path.getsize(item_path) / (1024*1024)
                    print(f"  üìà {item} ({size:.1f} MB)")
        else:
            print(f"  üì≠ Kh√¥ng c√≥ logs n√†o")
    
    # T√≥m t·∫Øt
    print(f"\nüéØ T√ìM T·∫ÆT:")
    if all_files_exist:
        print(f"  ‚úÖ T·∫•t c·∫£ file c·∫ßn thi·∫øt ƒë√£ s·∫µn s√†ng")
        print(f"  ‚úÖ Environment FIXED ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        print(f"  ‚úÖ S·∫µn s√†ng cho training")
        
        print(f"\nüöÄ C√ÅC B∆Ø·ªöC TI·∫æP THEO:")
        print(f"  1. Test environment: python demo_fixed.py")
        print(f"  2. So s√°nh v·ªõi c≈©: python test_comparison.py")
        print(f"  3. Training: python train_fixed.py --steps 1000000")
        print(f"  4. Monitor: tensorboard --logdir=logs")
        
    else:
        print(f"  ‚ùå Thi·∫øu m·ªôt s·ªë file c·∫ßn thi·∫øt")
        print(f"  ‚ùå Vui l√≤ng ki·ªÉm tra l·∫°i")
    
    return all_files_exist


def show_training_commands():
    """Hi·ªÉn th·ªã c√°c l·ªánh training"""
    print(f"\nüíª C√ÅC L·ªÜNH TRAINING:")
    print("=" * 30)
    
    commands = [
        ("Test environment", "python demo_fixed.py"),
        ("So s√°nh environments", "python test_comparison.py"),
        ("Training ng·∫Øn (500K steps)", "python train_fixed.py --steps 500000"),
        ("Training ƒë·∫ßy ƒë·ªß (2M steps)", "python train_fixed.py --steps 2000000"),
        ("Training d√†i (5M steps)", "python train_fixed.py --steps 5000000"),
        ("Monitor training", "tensorboard --logdir=logs"),
        ("Cleanup logs c≈©", "python cleanup_old_models.py")
    ]
    
    for desc, cmd in commands:
        print(f"  {desc}:")
        print(f"    {cmd}")
        print()


def main():
    """Main function"""
    print("üéØ CHU·∫®N B·ªä TRAINING V·ªöI ENVIRONMENT FIXED")
    print("D·ª±a tr√™n d·ª± √°n ho·∫°t ƒë·ªông t·ªët v·ªõi PD Controller + Assist System")
    print("=" * 70)
    
    # Chu·∫©n b·ªã m√¥i tr∆∞·ªùng
    success = prepare_training_environment()
    
    # Hi·ªÉn th·ªã l·ªánh training
    show_training_commands()
    
    if success:
        print(f"üéâ CHU·∫®N B·ªä HO√ÄN TH√ÄNH!")
        print(f"   - Environment FIXED s·∫µn s√†ng")
        print(f"   - C√°c file c·∫ßn thi·∫øt ƒë√£ c√≥")
        print(f"   - C√≥ th·ªÉ b·∫Øt ƒë·∫ßu training")
    else:
        print(f"‚ö†Ô∏è  CHU·∫®N B·ªä CH∆ØA HO√ÄN TH√ÄNH!")
        print(f"   - Vui l√≤ng ki·ªÉm tra l·∫°i c√°c file thi·∫øu")
        print(f"   - Ch·∫°y l·∫°i script sau khi s·ª≠a")


if __name__ == "__main__":
    main()
